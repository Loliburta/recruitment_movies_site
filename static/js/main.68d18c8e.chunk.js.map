{"version":3,"sources":["utils/context.ts","utils/apiCalls.ts","components/MovieOverview/MovieOverview.tsx","components/Movie/Movie.tsx","components/App/App.tsx","components/Wrapper.tsx","index.tsx"],"names":["overviewContext","createContext","apiKey","process","base","getCall","query","setMovies","a","mostPopularMovies","fetch","res","json","moviesList","console","log","results","searchCall","search","getGenres","genre_ids","result","genres","x","includes","id","name","slice","getCast","movie_id","credits","cast","value","MovieOverview","overview","release_date","title","vote_average","backdrop_path","poster_path","useContext","setOverviewBox","useState","movieGenres","setMovieGenres","movieCast","setMovieCast","closeOverview","useEffect","className","onClick","e","stopPropagation","icon","closeIcon","src","alt","Movie","App","movies","overviewBox","debouncedSearch","useCallback","debounce","htmlFor","searchFill","type","placeholder","onChange","target","map","movie","Wrapper","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68d18c8e.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\ntype overviewContextProps = [\n  overviewBox: any,\n  setOverviewBox?: React.Dispatch<React.SetStateAction<any>>\n];\n\nexport const overviewContext = createContext<overviewContextProps>([\"\"]);\n","const apiKey = process.env.REACT_APP_API_KEY;\nconst base = \"https://api.themoviedb.org/3/\";\n\nexport const getCall = async (\n  query: string,\n  setMovies: React.Dispatch<React.SetStateAction<never[]>>\n) => {\n  const mostPopularMovies = `${base}movie/${query}?api_key=${apiKey}&language=en-US&page=1`;\n  try {\n    const res = await fetch(mostPopularMovies);\n    const moviesList = await res.json();\n    console.log(moviesList.results);\n    setMovies(moviesList.results);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const searchCall = async (\n  search: string,\n  setMovies: React.Dispatch<React.SetStateAction<never[]>>\n) => {\n  try {\n    if (search) {\n      const res = await fetch(\n        `${base}search/movie?api_key=${apiKey}&language=en-US&query=${search}&page=1&include_adult=false`\n      );\n      const moviesList = await res.json();\n      console.log(moviesList);\n      setMovies(moviesList.results);\n    } else {\n      getCall(\"popular\", setMovies);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getGenres = async (genre_ids: number[]) => {\n  try {\n    let result = \"\";\n    const res = await fetch(\n      `${base}genre/movie/list?api_key=${apiKey}&language=en-US`\n    );\n    const genres = await res.json();\n    for (const x of genres.genres) {\n      genre_ids.includes(x.id) && (result += `${x.name}, `);\n    }\n    return result.slice(0, -2);\n\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getCast = async (movie_id: number) => {\n  try {\n    let result = \"\";\n    const res = await fetch(\n      `${base}movie/${movie_id}/credits?api_key=${apiKey}&language=en-US`\n    );\n    const credits = await res.json();\n    console.log(credits);\n    for (const value in credits.cast) {\n      if (value === \"4\") {\n        break;\n      }\n      result += `${credits.cast[value].name}, `;\n    }\n    return result.slice(0, -2);\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import { useState, useEffect } from \"react\";\nimport { Icon } from \"@iconify/react\";\nimport closeIcon from \"@iconify-icons/carbon/close\";\nimport { overviewContext } from \"../../utils/context\";\nimport { getGenres, getCast } from \"../../utils/apiCalls\";\nimport { useContext } from \"react\";\ninterface Props {\n  id: number;\n  overview: string;\n  release_date: string;\n  genre_ids: number[];\n  title: string;\n  vote_average: number;\n  poster_path: string;\n  backdrop_path: string;\n}\nexport const MovieOverview: React.FC<Props> = ({\n  id,\n  overview,\n  release_date,\n  genre_ids,\n  title,\n  vote_average,\n  poster_path,\n  backdrop_path,\n}) => {\n  const [, setOverviewBox] = useContext(overviewContext);\n  const imgApi = \"https://image.tmdb.org/t/p/w500\";\n  const [movieGenres, setMovieGenres] = useState<any>(\"\");\n  const [movieCast, setMovieCast] = useState<any>([]);\n\n  const closeOverview = () => {\n    setOverviewBox!(\"\");\n  };\n\n  useEffect(() => {\n    (async () => {\n      setMovieGenres(await getGenres(genre_ids));\n      setMovieCast(await getCast(id));\n      console.log(movieCast);\n    })();\n  }, [genre_ids, id, movieCast]);\n\n  return (\n    <div className=\"movieOverview__wrapper\" onClick={closeOverview}>\n      <div\n        className=\"movieOverview\"\n        onClick={(e) => {\n          e.stopPropagation();\n        }}\n      >\n        <div className=\"movieOverview__iconDiv\" onClick={closeOverview}>\n          <Icon className=\"movieOverview__iconDiv__icon\" icon={closeIcon} />\n        </div>\n        <img\n          className=\"movieOverview__img\"\n          src={imgApi + backdrop_path}\n          alt={title}\n        />\n        <div className=\"details\">\n          <div className=\"details__title\">\n            {title} ({release_date.slice(0, 4)})\n          </div>\n          <div className=\"details__rating\">\n            Rating{\" \"}\n            <b\n              className={\n                vote_average > 6\n                  ? \"details__vote_average\"\n                  : \"details__vote_average--bad\"\n              }\n            >\n              {vote_average}\n            </b>{\" \"}\n            / 10\n          </div>\n\n          <div className=\"details__overview\">{overview}</div>\n          <div className=\"details__movieGenres\">Genres: {movieGenres}</div>\n          <div className=\"details__cast\">Cast: {movieCast}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useContext } from \"react\";\nimport { MovieOverview } from \"../MovieOverview/MovieOverview\";\nimport { overviewContext } from \"../../utils/context\";\n\ninterface Props {\n  id: number;\n  overview: string;\n  release_date: string;\n  title: string;\n  genre_ids: number[];\n  vote_average: number;\n  poster_path: string;\n  backdrop_path: string;\n}\nconst imgApi = \"https://image.tmdb.org/t/p/w300\";\nexport const Movie: React.FC<Props> = ({\n  id,\n  overview,\n  release_date,\n  title,\n  genre_ids,\n  vote_average,\n  poster_path,\n  backdrop_path,\n}) => {\n  const [,setOverviewBox] = useContext(overviewContext);\n\n  const openOverview = () => {\n    setOverviewBox!(\n      <MovieOverview\n        id={id}\n        overview={overview}\n        release_date={release_date}\n        genre_ids={genre_ids}\n        title={title}\n        vote_average={vote_average}\n        poster_path={poster_path}\n        backdrop_path={backdrop_path}\n      />\n    );\n  };\n\n  return (\n    <>\n      <div className=\"movie\" onClick={openOverview}>\n        <img className=\"movie__img\" src={imgApi + poster_path} alt={title} />\n        <div\n          className={\n            vote_average > 6\n              ? \"movie__vote_average\"\n              : \"movie__vote_average--bad\"\n          }\n        >\n          {vote_average}\n        </div>\n        <div className=\"movie__info\">\n          <div className=\"movie__info__title\">{title}</div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect, useCallback, useContext } from \"react\";\nimport { Movie } from \"../Movie/Movie\";\nimport { getCall, searchCall } from \"../../utils/apiCalls\";\nimport { overviewContext } from \"../../utils/context\";\nimport { debounce } from \"lodash\";\nimport { Icon } from \"@iconify/react\";\nimport searchFill from \"@iconify-icons/eva/search-fill\";\ninterface Props {\n  id: number;\n  overview: string;\n  release_date: string;\n  all_genres: [{ id: number; name: string }];\n  genre_ids: number[];\n  title: string;\n  vote_average: number;\n  poster_path: string;\n  backdrop_path: string;\n}\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState([]);\n  const [overviewBox] = useContext(overviewContext);\n  const debouncedSearch = useCallback(\n    debounce(\n      (\n        search: string,\n        setMovies: React.Dispatch<React.SetStateAction<never[]>>\n      ) => searchCall(search, setMovies),\n      700\n    ),\n    []\n  );\n  const handleChange = (e: React.ChangeEvent<any>) => {\n    debouncedSearch(e.target.value, setMovies);\n  };\n\n  useEffect(() => {\n    getCall(\"popular\", setMovies);\n  }, []);\n\n  return (\n    <>\n      {overviewBox ? overviewBox : \"\"}\n      <div className=\"navbar\">\n        <div className=\"categories\">\n          <div\n            className=\"categories__popular\"\n            onClick={() => getCall(\"popular\", setMovies)}\n          >\n            Popular\n          </div>\n          <div\n            className=\"categories__popular\"\n            onClick={() => getCall(\"top_rated\", setMovies)}\n          >\n            Top Rated\n          </div>\n          <div\n            className=\"categories__popular\"\n            onClick={() => getCall(\"upcoming\", setMovies)}\n          >\n            Upcoming\n          </div>\n        </div>\n        <div className=\"navbar__search\">\n          <label htmlFor=\"input\">\n            <Icon className=\"navbar__icon\" icon={searchFill} />\n          </label>\n          <input\n            id=\"input\"\n            className=\"navbar__input\"\n            type=\"text\"\n            placeholder=\"Search\"\n            onChange={handleChange}\n          />\n        </div>\n      </div>\n      <div className=\"movies\">\n        {movies &&\n          movies.map((movie: Props) => {\n            if (!movie.backdrop_path || !movie.poster_path) {\n              return \"\";\n            }\n            return (\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                overview={movie.overview}\n                release_date={movie.release_date}\n                genre_ids={movie.genre_ids}\n                title={movie.title}\n                vote_average={movie.vote_average}\n                poster_path={movie.poster_path}\n                backdrop_path={movie.backdrop_path}\n              />\n            );\n          })}\n      </div>\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { App } from \"./App/App\";\nimport { overviewContext } from \"../utils/context\";\n\nexport const Wrapper = () => {\n  const [overviewBox, setOverviewBox] = useState(\"\");\n  return (\n    <overviewContext.Provider value={[overviewBox, setOverviewBox]}>\n      <App />\n    </overviewContext.Provider>\n  );\n};\n\nexport default Wrapper;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Wrapper from \"./components/Wrapper\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Wrapper />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}