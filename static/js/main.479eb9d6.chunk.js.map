{"version":3,"sources":["utils/context.ts","utils/apiCalls.ts","components/MovieOverview/MovieOverview.tsx","components/Movie/Movie.tsx","components/App/App.tsx","components/Wrapper.tsx","index.tsx"],"names":["overviewContext","createContext","apiKey","process","base","getCall","query","setMovies","a","mostPopularMovies","fetch","res","json","moviesList","results","console","log","searchCall","search","getGenres","genre_ids","result","genres","x","includes","id","name","slice","getCast","movie_id","credits","cast","value","MovieOverview","overview","release_date","title","vote_average","backdrop_path","useContext","setOverviewBox","useState","movieGenres","setMovieGenres","movieCast","setMovieCast","closeOverview","useEffect","className","onClick","e","stopPropagation","icon","closeIcon","src","alt","Movie","poster_path","App","movies","overviewBox","debouncedSearch","useCallback","debounce","htmlFor","searchFill","type","placeholder","onChange","target","handleChange","map","movie","Wrapper","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.479eb9d6.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\ntype overviewContextProps = [\n  overviewBox: any,\n  setOverviewBox?: React.Dispatch<React.SetStateAction<any>>\n];\n\nexport const overviewContext = createContext<overviewContextProps>([\"\"]);\n","const apiKey = process.env.REACT_APP_API_KEY;\nconst base = \"https://api.themoviedb.org/3/\";\n\nexport const getCall = async (\n  query: string,\n  setMovies: React.Dispatch<React.SetStateAction<never[]>>\n) => {\n  const mostPopularMovies = `${base}movie/${query}?api_key=${apiKey}&language=en-US&page=1`;\n  try {\n    const res = await fetch(mostPopularMovies);\n    const moviesList = await res.json();\n    setMovies(moviesList.results);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const searchCall = async (\n  search: string,\n  setMovies: React.Dispatch<React.SetStateAction<never[]>>\n) => {\n  try {\n    if (search) {\n      const res = await fetch(\n        `${base}search/movie?api_key=${apiKey}&language=en-US&query=${search}&page=1&include_adult=false`\n      );\n      const moviesList = await res.json();\n      setMovies(moviesList.results);\n    } else {\n      getCall(\"popular\", setMovies);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getGenres = async (genre_ids: number[]) => {\n  try {\n    let result = \"\";\n    const res = await fetch(\n      `${base}genre/movie/list?api_key=${apiKey}&language=en-US`\n    );\n    const genres = await res.json();\n    for (const x of genres.genres) {\n      genre_ids.includes(x.id) && (result += `${x.name}, `);\n    }\n    return result.slice(0, -2);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getCast = async (movie_id: number) => {\n  try {\n    let result = \"\";\n    const res = await fetch(\n      `${base}movie/${movie_id}/credits?api_key=${apiKey}&language=en-US`\n    );\n    const credits = await res.json();\n    for (const value in credits.cast) {\n      if (value === \"4\") {\n        break;\n      }\n      result += `${credits.cast[value].name}, `;\n    }\n    return result.slice(0, -2);\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import { useState, useEffect } from \"react\";\nimport { Icon } from \"@iconify/react\";\nimport closeIcon from \"@iconify-icons/carbon/close\";\nimport { overviewContext } from \"../../utils/context\";\nimport { getGenres, getCast } from \"../../utils/apiCalls\";\nimport { useContext } from \"react\";\ninterface Props {\n  id: number;\n  overview: string;\n  release_date: string;\n  genre_ids: number[];\n  title: string;\n  vote_average: number;\n  backdrop_path: string;\n}\nexport const MovieOverview: React.FC<Props> = ({\n  id,\n  overview,\n  release_date,\n  genre_ids,\n  title,\n  vote_average,\n  backdrop_path,\n}) => {\n  const [, setOverviewBox] = useContext(overviewContext);\n  const imgApi = \"https://image.tmdb.org/t/p/w780\";\n  const [movieGenres, setMovieGenres] = useState<string | undefined>(\"\");\n  const [movieCast, setMovieCast] = useState<string | undefined>(\"\");\n\n  const closeOverview = () => {\n    setOverviewBox!(\"\");\n  };\n\n  useEffect(() => {\n    (async () => {\n      setMovieGenres(await getGenres(genre_ids));\n      setMovieCast(await getCast(id));\n    })();\n  }, [genre_ids, id, movieCast]);\n\n  return (\n    <div className=\"movieOverview__wrapper\" onClick={closeOverview}>\n      <div\n        className=\"movieOverview\"\n        onClick={(e) => {\n          e.stopPropagation();\n        }}\n      >\n        <div className=\"movieOverview__iconDiv\" onClick={closeOverview}>\n          <Icon className=\"movieOverview__iconDiv__icon\" icon={closeIcon} />\n        </div>\n        <img\n          className=\"movieOverview__img\"\n          src={imgApi + backdrop_path}\n          alt={title}\n        />\n        <div className=\"details\">\n          <div className=\"details__title\">\n            {title} ({release_date.slice(0, 4)})\n          </div>\n          <div className=\"details__rating\">\n            Rating{\" \"}\n            <b\n              className={\n                vote_average > 6\n                  ? \"details__vote_average\"\n                  : \"details__vote_average--bad\"\n              }\n            >\n              {vote_average}\n            </b>{\" \"}\n            / 10\n          </div>\n\n          <div className=\"details__overview\">{overview}</div>\n          <div className=\"details__movieGenres\">\n            <span className=\"details--gray\">Genres:</span> {movieGenres}\n          </div>\n          <div className=\"details__cast\">\n            <span className=\"details--gray\">Cast:</span> {movieCast}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useContext } from \"react\";\nimport { MovieOverview } from \"../MovieOverview/MovieOverview\";\nimport { overviewContext } from \"../../utils/context\";\n\ninterface Props {\n  id: number;\n  overview: string;\n  release_date: string;\n  title: string;\n  genre_ids: number[];\n  vote_average: number;\n  poster_path: string;\n  backdrop_path: string;\n}\nexport const Movie: React.FC<Props> = ({\n  id,\n  overview,\n  release_date,\n  title,\n  genre_ids,\n  vote_average,\n  poster_path,\n  backdrop_path,\n}) => {\n  const [, setOverviewBox] = useContext(overviewContext);\n  const imgApi = \"https://image.tmdb.org/t/p/w300\";\n  const openOverview = () => {\n    setOverviewBox!(\n      <MovieOverview\n        id={id}\n        overview={overview}\n        release_date={release_date}\n        genre_ids={genre_ids}\n        title={title}\n        vote_average={vote_average}\n        backdrop_path={backdrop_path}\n      />\n    );\n  };\n\n  return (\n    <>\n      <div className=\"movie\" onClick={openOverview}>\n        <img className=\"movie__img\" src={imgApi + poster_path} alt={title} />\n        <div\n          className={\n            vote_average > 6\n              ? \"movie__vote_average\"\n              : \"movie__vote_average--bad\"\n          }\n        >\n          {vote_average}\n        </div>\n        <div className=\"movie__info\">\n          <div className=\"movie__info__title\">{title}</div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect, useCallback, useContext } from \"react\";\nimport { Movie } from \"../Movie/Movie\";\nimport { getCall, searchCall } from \"../../utils/apiCalls\";\nimport { overviewContext } from \"../../utils/context\";\nimport { debounce } from \"lodash\";\nimport { Icon } from \"@iconify/react\";\nimport searchFill from \"@iconify-icons/eva/search-fill\";\ninterface Props {\n  id: number;\n  overview: string;\n  release_date: string;\n  all_genres: [{ id: number; name: string }];\n  genre_ids: number[];\n  title: string;\n  vote_average: number;\n  poster_path: string;\n  backdrop_path: string;\n}\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState([]);\n  const [overviewBox] = useContext(overviewContext);\n  //Doesn't matter if variable is stale bcs it overwrites it\n  //eslint-disable-next-line\n  const debouncedSearch = useCallback(\n    debounce(\n      (\n        search: string,\n        setMovies: React.Dispatch<React.SetStateAction<never[]>>\n      ) => searchCall(search, setMovies),\n      500\n    ),\n    []\n  );\n  const handleChange = (\n    e: React.ChangeEvent<any>,\n    setMovies: React.Dispatch<React.SetStateAction<never[]>>\n  ) => {\n    debouncedSearch(e.target.value, setMovies);\n  };\n\n  useEffect(() => {\n    getCall(\"popular\", setMovies);\n  }, []);\n\n  return (\n    <>\n      {overviewBox ? overviewBox : \"\"}\n      <div className=\"navbar\">\n        <div className=\"categories\">\n          <div\n            className=\"categories__popular\"\n            onClick={() => getCall(\"popular\", setMovies)}\n          >\n            Popular\n          </div>\n          <div\n            className=\"categories__popular\"\n            onClick={() => getCall(\"top_rated\", setMovies)}\n          >\n            Top Rated\n          </div>\n          <div\n            className=\"categories__popular\"\n            onClick={() => getCall(\"upcoming\", setMovies)}\n          >\n            Upcoming\n          </div>\n        </div>\n        <div className=\"navbar__search\">\n          <label htmlFor=\"input\">\n            <Icon className=\"navbar__icon\" icon={searchFill} />\n          </label>\n          <input\n            id=\"input\"\n            className=\"navbar__input\"\n            type=\"text\"\n            placeholder=\"Search\"\n            onChange={(e) => handleChange(e, setMovies)}\n          />\n        </div>\n      </div>\n      <div className=\"movies\">\n        {movies &&\n          movies.map((movie: Props) => {\n            if (!movie.backdrop_path || !movie.poster_path) {\n              return \"\";\n            }\n            return (\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                overview={movie.overview}\n                release_date={movie.release_date}\n                genre_ids={movie.genre_ids}\n                title={movie.title}\n                vote_average={movie.vote_average}\n                poster_path={movie.poster_path}\n                backdrop_path={movie.backdrop_path}\n              />\n            );\n          })}\n      </div>\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { App } from \"./App/App\";\nimport { overviewContext } from \"../utils/context\";\n\nexport const Wrapper = () => {\n  const [overviewBox, setOverviewBox] = useState(\"\");\n  return (\n    <overviewContext.Provider value={[overviewBox, setOverviewBox]}>\n      <App />\n    </overviewContext.Provider>\n  );\n};\n\nexport default Wrapper;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Wrapper from \"./components/Wrapper\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Wrapper />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}